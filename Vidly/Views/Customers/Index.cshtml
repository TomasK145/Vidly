@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
   ViewBag.Title = "Customers";
   Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>
<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @*@foreach(var customer in Model) //nie je potrebne, DataTables ziskaju data volanim Api --> lepsia performance
        {
            <tr>
                <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                <td>@customer.MembershipType.Name</td>
                <td>
                    <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
                    <!-- js-delete -- js znamena ze dana trieda je pre ucely Javascriptu, nie pre stylovanie-->
                    <!-- data-customer-id - vytvoreny custom data atribut pre moznost ziskania C# hodnoty v js -->
                </td>
            </tr>               
        }*@
    </tbody>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {
            //$('#customers').DataTable(); //inicializacia DataTables 
            $('#customers').DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc: ''
                },
                columns: [
                    {
                        data: "name", //nazov stlpca
                        render: function (data, type, customer) {    //custom rendering funkcia --> volana pre renderovania kazdeho riadku 
                            return "<a href='/customers/edit/" + customer.id + "'>" + data + "</a>";
                        }
                    },
                    {
                        data: "name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            //$('#customers .js-delete').on('click', function () { //neefektivne, pretoze kazdy customer ma v memory vlastny event handler
            $('#customers').on('click', '.js-delete', function () {
                //tymto sposobom existuje len jeden click handler (lebo existuje len jeden element s ID = "customers") pre vsetkych customerov, pridany filter
                //v tomto pripade je 2 parameter filtrom ('.js-delete')
                var button = $(this);

                bootbox.confirm('Are you sure you want to delete customer?', function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr('data-customer-id'),
                            method: 'DELETE',
                            success: function () {
                                //$(this) --> tu v callback funkcii uz "this" nereferencuje na button
                                button.parents('tr').remove();
                            }
                        });
                    }
                });
            });
        });
    </script>
}